---
import type { HTMLAttributes } from "astro/types";

import { cva, type VariantProps } from "class-variance-authority";

import { ub } from "@/utils/ub";

const buttonVariants = cva(
  ":uno: inline-flex items-center justify-center rounded-md text-sm font-medium ring-offset-background transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50",
  {
    variants: {
      variant: {
        default: ":uno: bg-primary text-primary-foreground hover:bg-primary/90",
        destructive:
          ":uno: bg-destructive text-destructive-foreground hover:bg-destructive/90",
        outline:
          ":uno: border border-input bg-background hover:bg-accent hover:text-accent-foreground",
        secondary:
          ":uno: bg-secondary text-secondary-foreground hover:bg-secondary/80",
        ghost: ":uno: hover:bg-accent hover:text-accent-foreground",
        link: ":uno: text-primary underline-offset-4 hover:underline",
      },
      size: {
        default: ":uno: h-10 px-4 py-2",
        sm: ":uno: h-9 rounded-md px-3",
        lg: ":uno: h-11 rounded-md px-8",
        icon: ":uno: h-10 w-10 rounded-full",
      },
    },
    defaultVariants: {
      variant: "default",
      size: "default",
    },
  },
);

export type Props = VariantProps<typeof buttonVariants> &
  HTMLAttributes<"button">;

const { class: className, variant, size, ...props } = Astro.props;
---

<button class={ub(buttonVariants({ variant, size, className }))} {...props}>
  <slot />
</button>
