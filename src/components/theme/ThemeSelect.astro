---
import { Icon } from "astro-icon/components";
import Button from "../ui/Button.astro";
---

<starlight-theme-select>
  <div class="dark:block hidden">
    <Button id="select-light" size="icon" variant="ghost" name="selectlight">
      <Icon name="lucide:sun" class="h-5 w-5" />
    </Button>
  </div>

  <div class="dark:hidden block">
    <Button id="select-dark" size="icon" variant="ghost" name="selectdark">
      <Icon name="lucide:moon" class="w-5 h-5" />
    </Button>
  </div>
</starlight-theme-select>

{/* Inlined to avoid FOUC. Uses global scope from `ThemeProvider.astro` */}
<script is:inline>
  ThemeProvider.updatePickers();
</script>

<script>
  type Theme = "auto" | "dark" | "light";

  class StarlightThemeSelect extends HTMLElement {
    /** Key in `localStorage` to store color theme preference at. */
    #key = "starlight-theme";

    constructor() {
      super();
      this.#onThemeChange(this.#loadTheme());

      const lightButton = this.querySelector("#select-light");
      if (lightButton) {
        lightButton.addEventListener("click", () => {
          this.#onThemeChange("light");
        });
      }

      const darkButton = this.querySelector("#select-dark");
      if (darkButton) {
        darkButton.addEventListener("click", () => {
          this.#onThemeChange("dark");
        });
      }
    }

    /** Get a typesafe theme string from any JS value (unknown values are coerced to `'auto'`). */
    #parseTheme(theme: unknown): Theme {
      if (theme === "auto" || theme === "dark" || theme === "light") {
        return theme;
      } else {
        return "auto";
      }
    }

    /** Get the preferred system color scheme. */
    #getPreferredColorScheme(): Theme {
      return matchMedia("(prefers-color-scheme: light)").matches
        ? "light"
        : "dark";
    }

    /** Update select menu UI, document theme, and local storage state. */
    #onThemeChange(theme: Theme): void {
      document.documentElement.dataset.theme =
        theme === "auto" ? this.#getPreferredColorScheme() : theme;
      this.#storeTheme(theme);
    }

    /** Store the user’s preference in `localStorage`. */
    #storeTheme(theme: Theme): void {
      if (typeof localStorage !== "undefined") {
        if (theme === "light" || theme === "dark") {
          localStorage.setItem(this.#key, theme);
        } else {
          localStorage.removeItem(this.#key);
        }
      }
    }

    /** Load the user’s preference from `localStorage`. */
    #loadTheme(): Theme {
      const theme =
        typeof localStorage !== "undefined" && localStorage.getItem(this.#key);
      return this.#parseTheme(theme);
    }
  }

  customElements.define("starlight-theme-select", StarlightThemeSelect);
</script>
