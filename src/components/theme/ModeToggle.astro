---
import { Icon } from "astro-icon/components";
import { Button } from "../ui/button";
---

<theme-select>
  <div class=":uno: dark:block hidden transition duration-100 ease-in-out">
    <Button
      id="select-light"
      size="icon"
      variant="ghost"
      aria-label="Switch to light mode"
    >
      <Icon name="lucide:sun" class=":uno: h-5 w-5 blog-theme-switcher" />
    </Button>
  </div>

  <div class=":uno: dark:hidden block transition duration-100 ease-in-out">
    <Button
      id="select-dark"
      size="icon"
      variant="ghost"
      aria-label="Switch to dark mode"
    >
      <Icon name="lucide:moon" class=":uno: w-5 h-5 blog-theme-switcher" />
    </Button>
  </div>
</theme-select>

<script>
  type Theme = "auto" | "dark" | "light";

  const isAppearanceTransition =
    document.startViewTransition &&
    !window.matchMedia("(prefers-reduced-motion: reduce)").matches;

  class ThemeSelect extends HTMLElement {
    /** Key in `localStorage` to store color theme preference at. */
    #key = "theme";

    constructor() {
      super();
      this.#onThemeChange(this.#loadTheme());

      const lightButton = this.querySelector("#select-light");
      if (lightButton) {
        lightButton.addEventListener("click", (event) => {
          this.#toggleDark(event as MouseEvent, "light");
        });
      }

      const darkButton = this.querySelector("#select-dark");
      if (darkButton) {
        darkButton.addEventListener("click", (event) => {
          this.#toggleDark(event as MouseEvent, "dark");
        });
      }
    }

    /** Get a typesafe theme string from any JS value (unknown values are coerced to `'auto'`). */
    #parseTheme(theme: unknown): Theme {
      if (theme === "dark" || theme === "light") {
        return theme;
      } else {
        return "auto";
      }
    }

    #onThemeChange(theme: Theme): void {
      document.documentElement.dataset.theme = theme;
    }

    #toggleDark(event: MouseEvent, theme: Theme) {
      if (!isAppearanceTransition || !event) {
        this.#onThemeChange(theme);
        return;
      }
      const x = event.clientX;
      const y = event.clientY;
      const endRadius = Math.hypot(
        Math.max(x, innerWidth - x),
        Math.max(y, innerHeight - y)
      );
      // @ts-expect-error: Transition API
      const transition = document.startViewTransition(async () => {
        this.#onThemeChange(theme);
      });

      transition.ready.then(() => {
        const clipPath = [
          `circle(0px at ${x}px ${y}px)`,
          `circle(${endRadius}px at ${x}px ${y}px)`,
        ];
        document.documentElement.animate(
          {
            clipPath:
              this.#loadTheme() === "dark" ? [...clipPath].reverse() : clipPath,
          },
          {
            duration: 400,
            easing: "ease-in",
            pseudoElement:
              this.#loadTheme() === "dark"
                ? "::view-transition-old(root)"
                : "::view-transition-new(root)",
          }
        );
      });
    }

    #loadTheme(): Theme {
      return this.#parseTheme(document.documentElement.dataset.theme);
    }
  }

  customElements.define("theme-select", ThemeSelect);
</script>
